
The normal Java enforcer rule out of the box is toolchain unaware and is really only usefull for checking what java version
is available via the users shell environment. It does not check that the java compiler version is sane or matches the java
command version.

This rule requires a valid toolchains.xml in your ~/.m2 folder e.g.

<toolchains>
    <toolchain>
       <type>jdk</type>
       <provides>
           <version>1.5</version>
           <vendor>sun</vendor>
           <id>1.5</id>
       </provides>
       <configuration>
          <jdkHome>/opt/shared/java/jdk1.5</jdkHome>
       </configuration>
    </toolchain>
    <toolchain>
       <type>jdk</type>
       <provides>
           <version>1.6</version>
           <vendor>sun</vendor>
           <id>1.6</id>
       </provides>
       <configuration>
          <jdkHome>/opt/shared/java/jdk1.6</jdkHome>
       </configuration>
    </toolchain>
    <toolchain>
       <type>jdk</type>
       <provides>
           <version>1.7</version>
           <vendor>sun</vendor>
           <id>1.7</id>
       </provides>
       <configuration>
          <jdkHome>/opt/shared/java/jdk1.7</jdkHome>
       </configuration>
    </toolchain>
</toolchains>


Sample usage in a project pom.xml is illustrated below

  ...
  <build>
      <plugins>
          <plugin>
            <artifactId>maven-toolchains-plugin</artifactId>
            <version>${toolchains_plugin_version}</version>
            <executions>
              <execution>
                <id>toolchain</id>
                <phase>validate</phase>
                <goals>
                  <goal>toolchain</goal>
                </goals>
                <configuration>
                  <toolchains>
                    <jdk>
                      <version>1.6</version>
                    </jdk>
                  </toolchains>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
              <artifactId>maven-enforcer-plugin</artifactId>
              <version>${enforcer_plugin_version}</version>
                  <dependencies>
                    <dependency>
                        <groupId>com.github.paulmoloney</groupId>
                        <artifactId>maven-enforcer-toolchain-rules</artifactId>
                        <version>1.0.1</version> 
                    </dependency>
                  </dependencies>
                  <executions>
                      <execution>
                         <id>enforce-versions</id>
                         <phase>validate</phase>
                         <goals>
                           <goal>display-info</goal>
                           <goal>enforce</goal>
                         </goals>
                         <configuration>
                           <rules>
                               <!-- Since this rule is not in the org.apache.maven.plugins.enforcer
                                    package one requires the implementation attribute -->
                               <implementation="com.github.paulmoloney.maven.plugins.enforcer.RuleJavaVersionToolchainAware">
                               <ruleJavaVersionToolchainAware> 
                                   <version>[1.6.0-30,)</version>
                               </ruleJavaVersionToolchainAware>
                           </rules>
                         </configuration>
                      </execution>
                  </executions>
          </plugin>
      </plugins>
  </build>

  ...

As an aside I typically create a generic symlink e.g. /opt/shared/java/jdk1.6 pointing at the real jdk located in /opt/shared/java/jdk1.6.0_34

